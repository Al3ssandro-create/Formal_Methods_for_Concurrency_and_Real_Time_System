<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>///Constants

const int LENGTH_PRINCIPAL_RAIL=16;
const int LENGTH_DIRAMENT=5;
const int NUM_PODS = 4;
const int N_STATION = 2;
const int STATION_VARIANCE = 1;
const int STATION_MEAN = 2;
const int POS_POD[NUM_PODS]={1,3,6,7};
const int array_belt[LENGTH_PRINCIPAL_RAIL]={0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0};
const int array_dirament[LENGTH_DIRAMENT]={0,0,0,0,0};
const int index_station[N_STATION]={11,13};
const int diramation=0;



//Here we are defining the pods with the auto-instance of Uppaal
typedef int[0,NUM_PODS-1] pod_t;
typedef int[0,N_STATION-1] stat_t;

/*** GLOBAL VARIABLES***/

clock generalClock;
//clock per il belt handler, per sincronizzare i movimenti
clock c;
int pos_Id_Station[NUM_PODS];
// 0: rail, 1: station: 2: sempahore
int pods_position[NUM_PODS];
int station_position[N_STATION]={11,15};
bool station_free[N_STATION]={true,true};
//We define a new datastructure depending on how many diramament has the railstation

typedef struct{
  int main[LENGTH_PRINCIPAL_RAIL];
  int firs_diramantion[LENGTH_PRINCIPAL_RAIL];
} ConveyorBelt;



ConveyorBelt belt;

//Tiene traccia del binomio pods_station quando la pods entra nella stazione
typedef struct{
  int idStation;
  int idPod;
  bool exit1;
} Station_Pod;

Station_Pod station_pod[N_STATION];

/*** CHANNELS ***/
broadcast chan initializer;
broadcast chan move;
broadcast chan check;
urgent chan entryStation[N_STATION];
urgent chan exitStation[N_STATION];


/*** GLOBAL UTILITY FUNCTIONS ************************************************/


void initialize(){
    int i;
    for(i=0;i&lt;NUM_PODS;i++){
        pods_position[i]= POS_POD[i];
    }
    
    for(i=0;i&lt;N_STATION;i++){
       station_pod[i].idStation= i;
        station_pod[i].idPod= -1;

    }
    for(i=0;i&lt;N_STATION;i++){
       station_pod[i].exit1=false;
    }

   if(diramation==0)
        belt.main=array_belt;    

}

// aggiorna la posizione aggiungendo 1, chiamato dalla pods quando avanza 
void updateCurrentPositionGlobal(int id){
         pods_position[id]=pods_position[id] + 1;
    }

//quando la pods entra nella stazione viene aggiornata la struttura dati utilizzata per tenere traccia delle pods nelle stazioni
void enter_station(int id){
    int i;
    for(i=0;i&lt;N_STATION;i++){
        if(index_station[i]==pods_position[id])
            station_pod[i].idPod=id;
    }
}

//chiamata dalla pods, controlla se la stazione in cui è la pods è libera, se è così ritorna true altrimenti ritorna false
bool checkExitStation(int id){
    int i;
    for(i=0;i&lt;N_STATION;i++){
        if(station_pod[i].idPod==id &amp;&amp; station_free[station_pod[i].idStation]==true &amp;&amp; station_pod[i].exit1==true) 
           return true;
        }
    return false;
}
void resetExit(int id){
    int i;
    for(i=0;i&lt;N_STATION;i++){
        if(station_pod[i].idPod==id)
           station_pod[i].exit1=false;
           station_pod[i].idPod=-1;
     }
}

bool checkWaitingGlobal(int id){
    if(array_belt[pods_position[id]]==1)
        return true;

        return false;
}

bool checkIfStationGlobal(int id){
    if(array_belt[pods_position[id]]==2)
        return true;

        return false;
}
</declaration>
	<template>
		<name x="5" y="5"></name>
		<declaration>// Place local declarations here.</declaration>
		<location id="id0" x="0" y="0">
		</location>
		<init ref="id0"/>
	</template>
	<template>
		<name>Pod</name>
		<parameter>const pod_t id</parameter>
		<declaration>//true because we suppose you are ready and set to false if check go wrong
bool ready= true;
bool waiting= false;
bool station= false;


int current_pos=POS_POD[id];



bool isReady(){
    return ready;
}

bool isStation(){
    return station;
}

bool isWaiting(){
    return waiting;
}

int retrieve_station(int id){
    int c=-1;
    int i=0;
    for(i=0; i &lt; N_STATION; i++){
        if(station_pod[i].idPod==id){
            c=i;
        }
    }
    return c;
}

void setReadyFalse(){
    ready=false;
}

void checkStation(){
      if(checkIfStationGlobal(id)){
        station=true;
        ready=false;
}
    else{
        station=false;
        ready=true;
    }
}


void checkWaiting(){
      if(checkWaitingGlobal(id))
        waiting=true;
    else
        waiting=false;
}

void updateCurrentPosition(){
       current_pos= current_pos + 1;
updateCurrentPositionGlobal(id);
checkStation();
     
}

void initilaize(){
checkWaiting();
checkStation();

}</declaration>
		<location id="id1" x="-790" y="-178">
		</location>
		<location id="id2" x="-1011" y="-187">
		</location>
		<location id="id3" x="-629" y="-323">
		</location>
		<location id="id4" x="-569" y="-144">
			<name x="-527" y="-161">Ready_to_move</name>
		</location>
		<location id="id5" x="-841" y="-374">
		</location>
		<location id="id6" x="-892" y="-501">
			<name x="-902" y="-535">In_Station</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="guard" x="-1198" y="-527">checkExitStation(id)</label>
			<label kind="synchronisation" x="-1258" y="-561">exitStation[retrieve_station(id)]?</label>
			<label kind="assignment" x="-1283" y="-488">updateCurrentPosition(), resetExit(id)</label>
			<nail x="-1301" y="-484"/>
			<nail x="-1284" y="-322"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-850" y="-442">entryStation[retrieve_station(id)]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<nail x="-527" y="-315"/>
			<nail x="-646" y="-400"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-680" y="-76">move?</label>
			<label kind="assignment" x="-697" y="-59">updateCurrentPosition()</label>
			<nail x="-604" y="-77"/>
			<nail x="-654" y="-85"/>
			<nail x="-731" y="-102"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-765" y="-280">isWaiting()</label>
			<label kind="synchronisation" x="-739" y="-255">check?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-705" y="-187">isReady()</label>
			<label kind="synchronisation" x="-714" y="-153">check?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="guard" x="-901" y="-297">isStation()</label>
			<label kind="synchronisation" x="-909" y="-263">check?</label>
			<label kind="assignment" x="-816" y="-323">enter_station(id)</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-935" y="-204">initializer?</label>
			<label kind="assignment" x="-960" y="-178">initilaize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Belt_Handler</name>
		<declaration>




</declaration>
		<location id="id7" x="-518" y="-144">
		</location>
		<location id="id8" x="-722" y="-144">
		</location>
		<location id="id9" x="-365" y="-144">
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="-415" y="-97">c==8</label>
			<label kind="synchronisation" x="-450" y="25">move!</label>
			<label kind="assignment" x="-442" y="59">c:=0</label>
			<nail x="-433" y="17"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="guard" x="-459" y="-144">c==4</label>
			<label kind="synchronisation" x="-467" y="-170">check!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-704" y="-161">initializer!</label>
			<label kind="assignment" x="-704" y="-144">initialize(), c:=0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Station</name>
		<parameter>const stat_t id</parameter>
		<declaration>double mean,variance;
int processing_time=2;// (real processing time is 4) //dobbiamo metterlo qua il processing time perchè mi ha dato un sacco di problemi
bool free = true;
clock stationClock;
/*
 *    Check whether the station is free
 */
bool isFree(){
    if (station_free[id]==true)
        return true;
     else
        return false;
}
void exit_station(int id){
     station_pod[id].exit1=true;
}


</declaration>
		<location id="id10" x="-501" y="-34">
			<name x="-578" y="-42">START</name>
		</location>
		<location id="id11" x="-229" y="-34">
			<name x="-246" y="-76">Proc</name>
		</location>
		<location id="id12" x="119" y="-34">
			<name x="144" y="-42">Release</name>
			<label kind="invariant" x="51" y="0">stationClock &lt;= processing_time</label>
			<committed/>
		</location>
		<location id="id13" x="-195" y="-331">
			<label kind="invariant" x="-289" y="-374">stationClock &lt;= processing_time</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-483" y="-199">exitStation[id]!</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="assignment" x="8" y="-178">station_free[id]=true,exit_station(id)</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-211" y="-68">clockStation== proccesing_time</label>
			<label kind="assignment" x="-127" y="-17">stationClock :=0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-340" y="-59">isFree()</label>
			<label kind="synchronisation" x="-459" y="-59">entryStation[id]?</label>
			<label kind="assignment" x="-510" y="-17">stationClock:=0 , station_free[id]=false</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Belt_Handler();
// List one or more processes to be composed into a system.
system Pod,Station, Process;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
