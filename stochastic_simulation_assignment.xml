<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>///Constants
const int MAX_POSITION = 74;
const int NUM_PODS = 5;
const int NUM_SWITCH = 1;
const int N_STATION = 6;
const int STATION_VARIANCE = 1;
const int STATION_MEAN = 2;
const int POS_POD[NUM_PODS]={0,1,2,3,4};
const int previousStations[N_STATION][N_STATION] = {{0,0,0,0,0,1}, {1,0,0,0,0,0},{0,1,0,0,0,0}, {0,0,1,0,0,0},{0,1,0,0,0,0},{0,0,0,1,1,0}};
const int SWITCH_POS[NUM_SWITCH]={50};
const int station_switch[N_STATION]={-1,-1,0,0,-1,-1};
const int NUM_BRANCH[NUM_SWITCH] ={1};
const int PODS_BRANCH[NUM_PODS]={0,0,0,0,0};
const int LENGTH_BRANCH[NUM_SWITCH][1]={{12}};
const int SWITCH[NUM_SWITCH] = {1}; //TODO: va bene così?Leggendo le specifiche si, ma dobbiamo decidere assieme se farlo cambiare o meno
const int STATION_POSITION[N_STATION]={13,28,52,59,63,72};
const int STATION_BRANCH[N_STATION]={0,0,1,1,0,0};
const int POS_SENSOR_1[N_STATION] = {12,27,51,58,62,71};
const int POS_SENSOR_2[N_STATION] = {1,17,-1,54,54,69};
const int POSITION_END_BRANCH[NUM_SWITCH]={16};
const int TAU = 3000;

/*** CLOCK ***/
clock beltClock;

//Here we are defining the pods with the auto-instance of Uppaal
typedef int[0,NUM_PODS-1] pod_t;
typedef int[0,N_STATION-1] stat_t;
typedef int [0,N_STATION-1] queue_t;
typedef int [0,N_STATION-1] firstSensor_t;
typedef int [0,N_STATION-1] secondSensor_t;

/*** GLOBAL VARIABLES***/
int pods_switch[NUM_PODS]={-1,-1,-1,-1,-1};
int pos_Id_Station[NUM_PODS];
int pods_position[NUM_PODS];
int pods_branch[NUM_PODS]; 
bool pods_blocked[NUM_PODS];
bool stations_blocked[N_STATION];



bool station_free[N_STATION]={true,true,true,true,true,true};
bool valSensors[N_STATION][2];

int counter=0; //it is used to select the id to go in the branch

int error_first_sensors[N_STATION] = {50,50,50,50,50,50};
int error_second_sensors[N_STATION] = {50,50,50,50,50,50};

//Tiene traccia del binomio pods_station quando la pods entra nella stazione
typedef struct{
  int idStation;
  int idPod;
  bool exit1;
} Station_Pod;
Station_Pod station_pod[N_STATION];

typedef struct{
    int mean;
    int variance;
} Station_Distribution;
const Station_Distribution station_dis[N_STATION] = {
    {4,1},
    {4,1},
    {7,2},
    {8,4},
    {127,1},
    {24,4}
};

/*** CHANNELS ***/
broadcast chan initializer;
broadcast chan check;
broadcast chan move;
broadcast chan entryStation[N_STATION];
broadcast chan exitStation[N_STATION];
broadcast chan StopStations[N_STATION];

//chan priority check,move &lt; default &lt; entryStation[N_STATION-1],exitStation[N_STATION-1];

/*** GLOBAL UTILITY FUNCTIONS ************************************************/


void initialize(){
    int i;
    for(i=0;i&lt;NUM_PODS;i++){
        pods_position[i]=POS_POD[i];
        pods_branch[i] = PODS_BRANCH[i];
    }
    
    for(i=0;i&lt;N_STATION;i++){
       station_pod[i].idStation = i;
       station_pod[i].idPod=-1;
    }
    for(i=0;i&lt;N_STATION;i++){
       station_pod[i].exit1 = false;
    }

}
void blockNextIfPresent(int id){
    int i;
    bool flag;
    flag = true;
    while(flag){
        flag = false;
        for(i = 0; i &lt; NUM_PODS; i++){
            if(pods_position[i] == pods_position[id]-1 &amp;&amp; pods_branch[i] == pods_branch[id] &amp;&amp; pods_switch[i]== pods_switch[id]){
                pods_blocked[i]=true;
                flag = true;
                id = i;
            }
        }
    }
}
//this method is called at the end of the branch when the pods needs to be ricongiunta on the main branch
void updateCurrentPositionAfterBranchGlobal(int id,int pos_end_branch){
       if(pods_position[id]!=MAX_POSITION-1) pods_position[id]=pos_end_branch;
       else pods_position[id]=0;
}
// aggiorna la posizione aggiungendo 1, chiamato dalla pods quando avanza 
void updateCurrentPositionGlobal(int id){
         if(pods_position[id]!=MAX_POSITION-1) pods_position[id]=pods_position[id] + 1;
         else pods_position[id]=0;
}

int getIdPodInPos(int pos, int branch, int switch){
    int i;
    for(i=0; i&lt;NUM_PODS; i++){
        if(pods_position[i] == pos &amp;&amp; pods_branch[i] == branch &amp;&amp; pods_switch[i] == switch) return i;
    }
    return -1;
}

void checkBlockedGlobal(){
    int i,j;
    for(i=0; i&lt;NUM_PODS; i++){
        pods_blocked[i]=false;
    }
    for(j=0; j&lt;N_STATION; j++){
        for(i=0; i&lt;NUM_PODS; i++){
            if(pods_position[i]+1 == POS_SENSOR_1[j] &amp;&amp; pods_branch[i] == STATION_BRANCH[j]  &amp;&amp; getIdPodInPos(pods_position[i]+1, pods_branch[i], pods_switch[i]) != -1 ){
                  pods_blocked[i]=true;
                  blockNextIfPresent(i);
            }
        }
    }
}

void setValSensors(int index, int pos, bool value){
    valSensors[index][pos-1]=value;
}

//quando la pods entra nella stazione viene aggiornata la struttura dati utilizzata per tenere traccia delle pods nelle stazioni7
//TODO: ma se la station sta subito dopo lo switch?
void enter_station(int id){ 
    int i,index;
    if(id!=-1) {
        for(i=0;i&lt;N_STATION;i++){
            if(STATION_POSITION[i] == pods_position[id]+1 &amp;&amp; STATION_BRANCH[i]==pods_branch[id] &amp;&amp; pods_switch[id] == station_switch[i]
                || pods_position[id] == MAX_POSITION &amp;&amp; STATION_POSITION[i]==0 &amp;&amp; STATION_BRANCH[i]==pods_branch[id] &amp;&amp; station_switch[i]==pods_switch[id]){
                station_pod[i].idPod=id;
                index=i;
                }
        }
    }
    setValSensors(index,1,false);
    checkBlockedGlobal();
}


//chiamata dalla pods, controlla se la stazione in cui è la pods è libera, se è così ritorna true altrimenti ritorna false
bool checkExitStation(int id){
    int i;
    for(i=0;i&lt;N_STATION;i++){
        if(station_pod[i].idPod==id &amp;&amp; station_free[station_pod[i].idStation]==true &amp;&amp; station_pod[i].exit1==true ) { 
           return true;
        }
    }
    return false;
}
void resetExit(int id){
    int i;
    for(i=0;i&lt;N_STATION;i++){
        if(station_pod[i].idPod==id){
           station_pod[i].exit1=false;
           station_pod[i].idPod=-1;
        }
     }
}

bool checkWaitingGlobal(int id){
    int i = 0;
    for (i = 0; i &lt; N_STATION; i++ ){
        if(pods_position[id]==POS_SENSOR_1[i] &amp;&amp; STATION_BRANCH[i]==pods_branch[id])
            return true;
    }
    return false;
}

bool checkIfStationGlobal(int id){
    bool result=false;
    int i;
    for(i=0; i&lt;N_STATION; i++){
        if(pods_position[id]==STATION_POSITION[i]) result = true;
    }
    return result;
}

bool getValSensors(int index, int pos){
    return valSensors[index][pos-1];
}

bool checkGlobalPosOccupied(int pos, int branch){
	int i;
    for(i=0; i&lt;NUM_PODS; i++){
        if(pods_position[i]==pos &amp;&amp; pods_branch[i]==branch){
			return true;
        }
    }
    return false;
}

bool checkPodInPos(int pos,int id_sensor){
    int i;
    if(pos==-1) return false;
    for(i=0; i&lt;NUM_PODS; i++){
        if(id_sensor!=-1){
            if(pods_position[i]==pos &amp;&amp; pods_branch[i]==STATION_BRANCH[id_sensor] &amp;&amp; pods_switch[i]==station_switch[id_sensor]) return true;
        }else{
             if(pods_position[i]==pos)return true;
        }
    }
    return false;
}

bool checkPodBlockedInPos(int pos, int branch, int switch){
    int i;
    for(i=0; i&lt;NUM_PODS; i++){
        if(pods_position[i]==pos &amp;&amp; pods_branch[i] == branch &amp;&amp; pods_switch[i] == switch &amp;&amp; pods_blocked[i] == true ) return true;
    }
    return false;
}

bool checkPosIsSensor1(int pos, int branch){
    int i;
    for(i=0; i&lt;N_STATION; i++){
        if(POS_SENSOR_1[i]==pos &amp;&amp; STATION_BRANCH[i]==branch) return true;
    }
    return false;
}

bool checkPodBlockedInSensor2(int id) {
    int i;
    for(i=0; i&lt;NUM_PODS; i++){
        if(pods_position[i]==POS_SENSOR_2[id] &amp;&amp; pods_branch[i]== STATION_BRANCH[id] &amp;&amp; checkPodBlockedInPos(pods_position[i], pods_branch[i], pods_switch[i])) return true;
    }
    return false;
}

int getIdStationQueue(int pos, int branch) {
    int i;
    for(i=0; i&lt;N_STATION; i++){
        if(POS_SENSOR_1[i]==pos &amp;&amp; STATION_BRANCH[i]==branch) return i;
    }
    return -1;
}

void stopStationsGlobal(int id){
    int i;
    for(i=0; i&lt;N_STATION; i++){
        if(previousStations[id][i]==1) stations_blocked[i] = true;
    }
}

void resumeStationsGlobal(int id){
    int i;
    for(i=0; i&lt;N_STATION; i++){
        if(previousStations[id][i]==1) stations_blocked[i] = false;
    }
}

//Questo dovrebbe controllare se non c'è una pods nella branch principale
bool otherBranchNotEndedGlobal(int id){
    bool result = true; 
    int i;
    for(i = 0; i &lt; NUM_PODS; i++){
//questo idf viene fatto perchè alcune pod aggiornano la propria posizione prima di altre per cui questo if dovrebbe risolvere le cose
        if(id&lt; i){
            if(pods_position[i]+1 == POSITION_END_BRANCH[pods_branch[id]-1] &amp;&amp; pods_branch[id]!=pods_branch[i]){
               return false;
                }
        }else if(id&gt;i){
             if( pods_position[i] == POSITION_END_BRANCH[pods_branch[id]-1] &amp;&amp; pods_branch[id]!=pods_branch[i]){
               return false;
             }
        }
    }
    return true;
}

bool checkSamePositionGlobal(int pod_id){
    bool result = false;
    int i;
    if(pod_id != -1) {
        for(i=0; i&lt;NUM_PODS; i++){
            if(pods_position[pod_id] != MAX_POSITION - 1){
                if(i!=pod_id &amp;&amp; pods_position[pod_id]+1 == pods_position[i] &amp;&amp; pods_branch[pod_id] == pods_branch[i] &amp;&amp; pods_switch[pod_id] == pods_switch[i]) result = true;
            }else{
                if(pods_position[i]==0) result = true;
            }
        }
    } else return true;
    return result;
}
</declaration>
	<template>
		<name>Pod</name>
		<parameter>const pod_t id</parameter>
		<declaration>//true because we suppose you are ready and set to false if check go wrong
bool ready = true;
bool waiting = false;
bool station = false;
int idStation = -1;

int curr_branch = PODS_BRANCH[id];
int current_pos=  POS_POD[id];



bool isReady(){
    return ready;
}

bool isStation(){
    return station;
}

bool isBlocked(){
    return pods_blocked[id];
}

int retrieve_station(int id){
    int c=-1;
    int i=0;
    for(i=0; i &lt; N_STATION; i++){
        if(station_pod[i].idPod==id){
            c=i;
        }
    }
    return c;
}

void setReadyFalse(){
    ready=false;
}

int retrieve_waiting_station(int pos, int branch) {
    int c=-1;
    int i=0;
    for (i = 0; i &lt; N_STATION; i++ ){
        if(pos==POS_SENSOR_1[i] &amp;&amp; branch==STATION_BRANCH[i])
            c = i;
    }
    return c;
}

void checkWaiting(){
    if(checkWaitingGlobal(id)) {
        waiting=true;
        idStation = retrieve_waiting_station(pods_position[id],pods_branch[id]);
    }
    else {
        waiting=false;
    }
}

void checkBlocked(){
    if((checkSamePositionGlobal(id) &amp;&amp; checkPodBlockedInPos(pods_position[id]+1, pods_branch[id], pods_switch[id]))
        || (pods_position[id] == MAX_POSITION-1 &amp;&amp; checkPodInPos(0,-1) &amp;&amp; checkPodBlockedInPos(0,0,-1)) 
        || (pods_position[id] == MAX_POSITION-1 &amp;&amp; checkPosIsSensor1(0,0) &amp;&amp; checkPodInPos(0,-1) &amp;&amp; station_free[getIdStationQueue(0,0)]==false) //TODO: checkPosIsSensor1 deve controllare sul branch 0 ?
        || checkPosIsSensor1(pods_position[id]+1, pods_branch[id]) &amp;&amp; checkGlobalPosOccupied(pods_position[id]+1, pods_branch[id]) &amp;&amp;  station_free[getIdStationQueue(pods_position[id]+1,pods_branch[id])]==false 
        ) {

            pods_blocked[id] = true;
            blockNextIfPresent(id);

    } else{     pods_blocked[id] = false;}
}

bool isWaiting(){
    return waiting;
}



void checkStation(){
      if(checkIfStationGlobal(id)){
        station=true;
        ready=false;
    }
    else{
        station=false;
        ready=true;
    }
}


//TODO: se la branch finisce quando c'è una stazione non vengono aggiornati le branch

void updateCurrentPosition(){
    int i; 

    checkBlocked();
    if(!pods_blocked[id]){
// controlla se si è alla fine del branch e se sull'altro branch non arriva un altro pod allo stesso momento
        if(pods_switch[id] != -1 &amp;&amp; current_pos - SWITCH_POS[pods_switch[id]] == LENGTH_BRANCH[pods_switch[id]][curr_branch-1] &amp;&amp; otherBranchNotEndedGlobal(id)){ //TODO: calcoli giusti? otherBranchNotEnded lo implementiamo in checkBlocked?
            current_pos = SWITCH_POS[pods_switch[id]]+ POSITION_END_BRANCH[curr_branch-1];
            updateCurrentPositionAfterBranchGlobal(id, SWITCH_POS[pods_switch[id]]+ POSITION_END_BRANCH[curr_branch-1]);
            curr_branch = 0;
            pods_switch[id] = -1;
            checkBlockedGlobal();
            counter=10;

    }else if(pods_switch[id] != -1 &amp;&amp; current_pos - SWITCH_POS[pods_switch[id]] == LENGTH_BRANCH[pods_switch[id]][curr_branch-1] &amp;&amp; !otherBranchNotEndedGlobal(id)){
             counter=16;
     }else if(current_pos != MAX_POSITION-1  ){
            current_pos= current_pos + 1;
            updateCurrentPositionGlobal(id);
            checkBlockedGlobal();
            //checkStation();

    // sei alla max position e ricominci il loop
      
            }else{
            current_pos=0;
            updateCurrentPositionGlobal(id);
            checkBlockedGlobal();
            //checkStation();
        }
//assegno la branch se sono nella posizione dello switch e se sono = al countrer
        for(i = 0; i &lt; NUM_SWITCH ; i++){
            if(SWITCH_POS[i] == current_pos-1 &amp;&amp; id==counter){
                curr_branch = SWITCH[i];
                pods_switch[id] = i;
                if(counter&lt;NUM_PODS-1)counter++;
                    else counter=0;
            }
        }    
        pods_branch[id]=curr_branch;
    }
    checkWaiting();
}

void freeBlocked(){
    pods_blocked[id] = false;
}

void initilaize(){
    checkWaiting();
    checkStation();
    checkBlocked();
}

void setStationPosition(){
    pods_position[id] = STATION_POSITION[idStation];
    current_pos = STATION_POSITION[idStation];
    station_pod[idStation].idPod = id;
}

</declaration>
		<location id="id0" x="-790" y="-178">
			<label kind="exponentialrate" x="-800" y="-144">1000</label>
		</location>
		<location id="id1" x="-1011" y="-187">
			<label kind="exponentialrate" x="-1021" y="-153">1000</label>
		</location>
		<location id="id2" x="-569" y="-144">
			<name x="-527" y="-161">Ready_to_move</name>
			<label kind="exponentialrate" x="-579" y="-110">1000</label>
		</location>
		<location id="id3" x="-892" y="-501">
			<name x="-902" y="-535">In_Station</name>
			<label kind="exponentialrate" x="-952" y="-501">1000</label>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="-1045" y="-382">isWaiting() &amp;&amp; !isBlocked()</label>
			<label kind="synchronisation" x="-1020" y="-365">entryStation[idStation]?</label>
			<label kind="assignment" x="-1020" y="-348">setStationPosition()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-773" y="-408">checkExitStation(id)</label>
			<label kind="synchronisation" x="-748" y="-382">exitStation[idStation]?</label>
			<label kind="assignment" x="-714" y="-357">updateCurrentPosition(), resetExit(id), idStation=-1</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-680" y="-76">move?</label>
			<label kind="assignment" x="-697" y="-59">updateCurrentPosition()</label>
			<nail x="-604" y="-77"/>
			<nail x="-654" y="-85"/>
			<nail x="-731" y="-102"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-722" y="-187">!isWaiting() &amp;&amp; !isBlocked()</label>
			<label kind="synchronisation" x="-731" y="-153">check?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-935" y="-204">initializer?</label>
			<label kind="assignment" x="-993" y="-182">initilaize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Belt_Handler</name>
		<declaration>




</declaration>
		<location id="id4" x="-518" y="-144">
			<label kind="invariant" x="-528" y="-127">beltClock&lt;=1</label>
		</location>
		<location id="id5" x="-722" y="-144">
			<label kind="exponentialrate" x="-732" y="-110">1000</label>
		</location>
		<location id="id6" x="-357" y="-144">
			<label kind="invariant" x="-367" y="-127">beltClock&gt;=1 &amp;&amp; beltClock&lt;=2</label>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="-500" y="-178">beltClock==1</label>
			<label kind="synchronisation" x="-459" y="-144">check!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-561" y="-306">beltClock&gt;=2</label>
			<label kind="synchronisation" x="-561" y="-289">move!</label>
			<label kind="assignment" x="-561" y="-272">beltClock:=0</label>
			<nail x="-442" y="-246"/>
			<nail x="-586" y="-246"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-704" y="-161">initializer!</label>
			<label kind="assignment" x="-704" y="-144">initialize(), beltClock:=0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Station</name>
		<parameter>const stat_t id</parameter>
		<declaration>// (real processing time is 4) dobbiamo metterlo qua il processing time perchè mi ha dato un sacco di problemi
bool free = true;
clock stationClock;
int count=1;
int  processingTime = fint(random_normal(station_dis[id].mean, sqrt(station_dis[id].variance)));
/*
 *    Check whether the station is free
 */
bool isFree(){
    if (station_free[id]==true)
        return true;
     else
        return false;
}

void exit_station(int id){
     station_pod[id].exit1=true;
}

void updateCount(){
    count=count+1;
}

void freeBlockedPods(){
    pods_blocked[station_pod[id].idPod] = false;
}
bool checkNext(int id){
    int pod_id = station_pod[id].idPod;
    return checkSamePositionGlobal(pod_id);
}


</declaration>
		<location id="id7" x="-629" y="-34">
			<name x="-706" y="-42">START</name>
		</location>
		<location id="id8" x="-238" y="-85">
			<name x="-272" y="-119">Release</name>
			<label kind="exponentialrate" x="-248" y="-51">1000</label>
		</location>
		<location id="id9" x="-221" y="-348">
			<name x="-204" y="-365">CheckNextCell</name>
			<label kind="exponentialrate" x="-204" y="-340">1000</label>
		</location>
		<location id="id10" x="-450" y="68">
			<name x="-467" y="102">Processing</name>
			<label kind="invariant" x="-460" y="85">stationClock &lt;= processingTime</label>
		</location>
		<location id="id11" x="-229" y="-433">
			<urgent/>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-510" y="-59">stationClock&gt;=processingTime</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="-433" y="-433">checkNext(id)</label>
			<label kind="synchronisation" x="-296" y="-386">move?</label>
			<nail x="-314" y="-391"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="guard" x="-952" y="-8">isFree()</label>
			<label kind="synchronisation" x="-952" y="17">entryStation[id]?</label>
			<label kind="assignment" x="-952" y="42">stationClock:=0 , station_free[id]=false</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="-535" y="-238">!checkNext(id)</label>
			<label kind="synchronisation" x="-527" y="-212">exitStation[id]!</label>
			<label kind="assignment" x="-578" y="-187">freeBlockedPods()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-212" y="-263">stations_blocked[id]==false</label>
			<label kind="assignment" x="-212" y="-238">station_free[id]=true,exit_station(id)</label>
		</transition>
	</template>
	<template>
		<name>Queue</name>
		<parameter>const queue_t id</parameter>
		<declaration>bool busy = false;
bool stopped = false;
bool ready = false;
bool initialized = false;

bool getBusy() {
    return busy;
}

void freeBusy(){
    busy=false;
}

void initializeQueue(){
    if(checkPodInPos(POS_SENSOR_1[id],id)){
        ready = true;
    }else {
        ready = false;
    }
    initialized = true;
}
</declaration>
		<location id="id12" x="-476" y="-144">
			<name x="-595" y="-187">NotBusy</name>
			<label kind="invariant" x="-603" y="-170">busy == false</label>
			<label kind="exponentialrate" x="-595" y="-153">1000</label>
		</location>
		<location id="id13" x="-25" y="-136">
			<name x="34" y="-170">Busy</name>
			<label kind="invariant" x="34" y="-144">busy == true</label>
			<label kind="exponentialrate" x="-35" y="-102">1000</label>
		</location>
		<location id="id14" x="-255" y="136">
			<name x="-230" y="128">StopStationBefore</name>
			<label kind="exponentialrate" x="-229" y="144">1000</label>
		</location>
		<location id="id15" x="-841" y="-153">
			<name x="-851" y="-187">Initialized</name>
		</location>
		<location id="id16" x="-1071" y="-153">
			<name x="-1081" y="-187">Start</name>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="guard" x="-595" y="59">getValSensors(id,2)</label>
			<nail x="-450" y="59"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-1053" y="-170">initializer?</label>
			<label kind="assignment" x="-1053" y="-153">initializeQueue()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-331" y="8">!getValSensors(id,2)</label>
			<label kind="assignment" x="-323" y="34">stopped=false,busy=false, resumeStationsGlobal(id)</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="guard" x="-399" y="-408">initialized &amp;&amp; ready</label>
			<label kind="synchronisation" x="-399" y="-425">check?</label>
			<label kind="assignment" x="-399" y="-391">busy = true, enter_station(getIdPodInPos(POS_SENSOR_1[id],STATION_BRANCH[id], station_switch[id]))</label>
			<nail x="-323" y="-365"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="guard" x="-722" y="-85">initialized &amp;&amp; !ready</label>
			<label kind="synchronisation" x="-722" y="-102">check?</label>
			<nail x="-646" y="-110"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="-255" y="221">stopped==false &amp;&amp; beltClock&lt;=2</label>
			<label kind="assignment" x="-255" y="238">stopped=true, stopStationsGlobal(id)</label>
			<nail x="-255" y="213"/>
			<nail x="-188" y="213"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-110" y="-17">getValSensors(id,2)</label>
			<nail x="-119" y="-25"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-314" y="-93">exitStation[id]?</label>
			<label kind="assignment" x="-314" y="-76">busy=false</label>
			<nail x="-263" y="-93"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-552" y="-255">getValSensors(id,1) &amp;&amp; station_free[id]</label>
			<label kind="synchronisation" x="-552" y="-238">entryStation[id]!</label>
			<label kind="assignment" x="-552" y="-221">busy = true, enter_station(getIdPodInPos(POS_SENSOR_1[id], STATION_BRANCH[id], station_switch[id]))</label>
			<nail x="-297" y="-195"/>
		</transition>
	</template>
	<template>
		<name>FirstSensor</name>
		<parameter>const firstSensor_t id</parameter>
		<declaration>bool posPresent = false;
bool initialized = false;
int FirstSensorError;

//Usa le variabili globali per capire se c'è una pod nella sua cella
void checkPodPresent(int pos){
    if(checkPodInPos(pos,id)){
        posPresent = true;
    } else {
        posPresent = false;
    }
}

//Permette di porsi in NoPod o YesPod quando comincia la simulazione
void initializeSensor1(){
    checkPodPresent(POS_SENSOR_1[id]);
    FirstSensorError = error_first_sensors[id];
    initialized = true;
}

bool checkPod(){
    return checkPodInPos(POS_SENSOR_1[id],id);
}
</declaration>
		<location id="id17" x="-586" y="-195">
			<name x="-663" y="-204">NoPod</name>
			<label kind="invariant" x="-680" y="-161">beltClock&lt;=2</label>
		</location>
		<location id="id18" x="-85" y="-187">
			<name x="-68" y="-195">YesPod</name>
			<label kind="invariant" x="-68" y="-229">beltClock&lt;=2</label>
		</location>
		<location id="id19" x="-415" y="9">
			<name x="-510" y="0">Initialized</name>
		</location>
		<location id="id20" x="-416" y="153">
			<name x="-484" y="136">Start</name>
		</location>
		<branchpoint id="id21" x="-85" y="-110">
		</branchpoint>
		<branchpoint id="id22" x="-408" y="-399">
		</branchpoint>
		<init ref="id20"/>
		<transition>
			<source ref="id21"/>
			<target ref="id18"/>
			<label kind="probability" x="-59" y="-102">100-FirstSensorError</label>
			<nail x="-25" y="-110"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id17"/>
			<label kind="assignment" x="-484" y="-110">setValSensors(id,1,false)</label>
			<label kind="probability" x="-484" y="-93">FirstSensorError</label>
			<nail x="-518" y="-110"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id21"/>
			<label kind="guard" x="-187" y="-144">beltClock&gt;=2</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-450" y="-348">checkPod()</label>
			<label kind="synchronisation" x="-450" y="-331">check?</label>
			<label kind="assignment" x="-450" y="-314">setValSensors(id,1,true)</label>
			<nail x="-391" y="-289"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id17"/>
			<label kind="probability" x="-620" y="-425">100-FirstSensorError</label>
			<nail x="-586" y="-399"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id18"/>
			<label kind="assignment" x="-289" y="-340">setValSensors(id,1,true)</label>
			<label kind="probability" x="-297" y="-357">FirstSensorError</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id22"/>
			<label kind="guard" x="-569" y="-357">beltClock&gt;=2</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-408" y="68">initializer?</label>
			<label kind="assignment" x="-408" y="85">initializeSensor1()</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="-688" y="-93">!posPresent &amp;&amp; initialized</label>
			<label kind="synchronisation" x="-688" y="-110">check?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="guard" x="-331" y="-25">posPresent</label>
			<label kind="synchronisation" x="-331" y="-42">check?</label>
			<label kind="assignment" x="-331" y="-8">setValSensors(id,1,true)</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-484" y="-153">entryStation[id]?</label>
			<label kind="assignment" x="-484" y="-136">setValSensors(id,1,false)</label>
			<nail x="-416" y="-161"/>
		</transition>
	</template>
	<template>
		<name>SecondSensor</name>
		<parameter>const secondSensor_t id</parameter>
		<declaration>bool posPresent = false;
bool initialized = false;
int SecondSensorError;

//Usa le variabili globali per capire se c'è una pod nella sua cella
void checkPodPresent(int pos){
    if(pos == -1) posPresent = false;
    else {
        if(checkPodInPos(pos,id)){
            posPresent = true;
        } else {
            posPresent = false;
        }   
    }
}

//Permette di porsi in NoPod o YesPod quando comincia la simulazione
void initializeSensor2(){
    checkPodPresent(POS_SENSOR_2[id]);
    SecondSensorError = error_second_sensors[id];
    if(POS_SENSOR_2[id]!=-1) initialized = true;
}

bool checkPod(){
    return checkPodInPos(POS_SENSOR_2[id],id);
}
</declaration>
		<location id="id23" x="-739" y="-238">
			<name x="-807" y="-255">NoPod</name>
			<label kind="invariant" x="-850" y="-238">beltClock&lt;=2</label>
		</location>
		<location id="id24" x="-119" y="-221">
			<name x="-102" y="-230">YesPod</name>
			<label kind="invariant" x="-102" y="-246">beltClock&lt;=2</label>
		</location>
		<location id="id25" x="-544" y="-17">
			<name x="-562" y="8">Initialized</name>
		</location>
		<location id="id26" x="-544" y="127">
			<name x="-552" y="144">Start</name>
		</location>
		<branchpoint id="id27" x="-119" y="-136">
		</branchpoint>
		<branchpoint id="id28" x="-535" y="-518">
		</branchpoint>
		<init ref="id26"/>
		<transition>
			<source ref="id27"/>
			<target ref="id24"/>
			<label kind="probability" x="-102" y="-127">100-SecondSensorError</label>
			<nail x="-51" y="-136"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id23"/>
			<label kind="assignment" x="-603" y="-136">setValSensors(id,2,false)</label>
			<label kind="probability" x="-603" y="-119">SecondSensorError</label>
			<nail x="-654" y="-136"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id27"/>
			<label kind="guard" x="-221" y="-178">beltClock&gt;=2</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id23"/>
			<label kind="probability" x="-714" y="-544">100-SecondSensorError</label>
			<nail x="-739" y="-518"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id24"/>
			<label kind="assignment" x="-348" y="-408">setValSensors(id,2,true)</label>
			<label kind="probability" x="-357" y="-425">SecondSensorError</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id28"/>
			<label kind="guard" x="-722" y="-425">beltClock&gt;=2</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-535" y="34">initializer?</label>
			<label kind="assignment" x="-535" y="51">initializeSensor2()</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id23"/>
			<label kind="guard" x="-841" y="-136">!posPresent  &amp;&amp; initialized</label>
			<label kind="synchronisation" x="-841" y="-153">check?</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="-408" y="-59">posPresent &amp;&amp; initialized</label>
			<label kind="synchronisation" x="-391" y="-76">check?</label>
			<label kind="assignment" x="-408" y="-42">setValSensors(id,2,true)</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-603" y="-195">!checkPod()</label>
			<label kind="synchronisation" x="-603" y="-178">entryStation[id]?</label>
			<label kind="assignment" x="-603" y="-161">setValSensors(id,2,false)</label>
			<nail x="-544" y="-195"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="-578" y="-348">checkPod()</label>
			<label kind="synchronisation" x="-578" y="-331">check?</label>
			<label kind="assignment" x="-578" y="-314">setValSensors(id,2,true)</label>
			<nail x="-544" y="-289"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Belt_Handler();
// List one or more processes to be composed into a system.
system Pod,Station,Queue,FirstSensor,SecondSensor, Process;
    </system>
	<queries>
		<query>
			<formula>Pr[&lt;=TAU] ([] forall(i:pod_t) forall(j:pod_t) ((Pod(i).current_pos==Pod(j).current_pos &amp;&amp; Pod(i).curr_branch==Pod(j).curr_branch &amp;&amp; pods_switch[i]==pods_switch[j]) imply i==j))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=TAU] ([] forall(i:pod_t)forall(j:stat_t)((pods_position[i]+1==POS_SENSOR_2[j]) imply !Pod(i).isBlocked()))</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=TAU] ([] exists(j : stat_t) !stations_blocked[j])</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=TAU] ()</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate [&lt;=TAU] {Station(0).stationClock, Station(1).stationClock, Station(2).stationClock, Station(3).stationClock, Station(4).stationClock, Station(5).stationClock}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate [&lt;=TAU] {Pod(0).current_pos, Pod(0).curr_branch}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate [&lt;=500] {Pod(4).current_pos, Pod(3).current_pos, Pod(2).current_pos, Pod(1).current_pos, Pod(0).current_pos, Station(0).Processing, Station(0).START, Station(0).Release, Station(0).CheckNextCell, stations_blocked[0] }</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate[&lt;=TAU] {SecondSensor(2).Initialized, stations_blocked[1]}</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
