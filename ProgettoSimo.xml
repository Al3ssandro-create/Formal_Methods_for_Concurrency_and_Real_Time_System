<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int N = 7;

typedef int [0,N-1] id_queue;

bool valSensors[N][2];

void setValSensors(int index, int pos, bool value){
    valSensors[index][pos-1]=value;
}

bool getValSensors(int index, int pos){
    return valSensors[index][pos-1];
}

chan NewPod1[N];
chan FreePod1[N];
chan NewPod2[N];
broadcast chan FreePod2[N];
chan StopStations[N];</declaration>
	<template>
		<name>Queue</name>
		<parameter>const id_queue id</parameter>
		<declaration>int busy = 0;
int stopped = 0;

int getBusy() {
    return busy;
}

void freeBusy(){
    busy=0;
}</declaration>
		<location id="id0" x="-476" y="-144">
			<name x="-569" y="-178">NotBusy</name>
			<label kind="invariant" x="-569" y="-161">busy==0</label>
		</location>
		<location id="id1" x="-25" y="-136">
			<name x="34" y="-170">Busy</name>
			<label kind="invariant" x="34" y="-153">busy==1</label>
		</location>
		<location id="id2" x="-25" y="59">
			<name x="0" y="51">StopStationBefore</name>
		</location>
		<location id="id3" x="-476" y="51">
			<name x="-561" y="34">BackAgain</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-578" y="-59">FreePod2[id]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-348" y="68">FreePod1[id]!</label>
			<label kind="assignment" x="-348" y="85">stopped=0,busy=0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-25" y="144">stopped==0</label>
			<label kind="synchronisation" x="-25" y="161">StopStations[id]!</label>
			<label kind="assignment" x="-25" y="178">stopped=1</label>
			<nail x="-25" y="136"/>
			<nail x="42" y="136"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-17" y="-59">NewPod2[id]?</label>
			<nail x="-25" y="-51"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-314" y="-93">FreePod1[id]!</label>
			<label kind="assignment" x="-314" y="-76">busy=0</label>
			<nail x="-263" y="-93"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-365" y="-255">NewPod1[id]?</label>
			<label kind="assignment" x="-365" y="-238">busy=1</label>
			<nail x="-271" y="-195"/>
		</transition>
	</template>
	<template>
		<name>DummyStations</name>
		<parameter>const id_queue id</parameter>
		<location id="id4" x="-501" y="-161">
			<name x="-511" y="-195">Go</name>
		</location>
		<location id="id5" x="-246" y="-170">
			<name x="-256" y="-204">Stop</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-399" y="-102">FreePod2[id]?</label>
			<nail x="-365" y="-110"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-408" y="-255">StopStations[id]?</label>
			<nail x="-365" y="-229"/>
		</transition>
	</template>
	<template>
		<name>FirstSensor</name>
		<parameter>const id_queue id</parameter>
		<location id="id6" x="-544" y="-195">
			<name x="-629" y="-229">NoPod</name>
		</location>
		<location id="id7" x="-280" y="-195">
			<name x="-263" y="-229">YesPod</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-442" y="-153">FreePod1[id]?</label>
			<label kind="assignment" x="-442" y="-136">setValSensors(id,1,false)</label>
			<nail x="-416" y="-161"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-459" y="-297">NewPod1[id]!</label>
			<label kind="assignment" x="-459" y="-280">setValSensors(id,1,true)</label>
			<nail x="-408" y="-229"/>
		</transition>
	</template>
	<template>
		<name>SecondSensor</name>
		<parameter>const id_queue id</parameter>
		<location id="id8" x="-663" y="-238">
			<name x="-731" y="-272">NoPod</name>
		</location>
		<location id="id9" x="-425" y="-238">
			<name x="-416" y="-272">YesPod</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-561" y="-195">FreePod2[id]?</label>
			<label kind="assignment" x="-561" y="-178">setValSensors(id,2,false)</label>
			<nail x="-544" y="-195"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-578" y="-331">NewPod2[id]!</label>
			<label kind="assignment" x="-578" y="-314">setValSensors(id,2,true)</label>
			<nail x="-544" y="-289"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
qu1 = Queue(1);
s11 = FirstSensor(1);
s12 = SecondSensor(1);
dm1 = DummyStations(1);
qu2 = Queue(2);
s21 = FirstSensor(2);
s22 = SecondSensor(2);
dm2 = DummyStations(2);
qu3 = Queue(3);
s31 = FirstSensor(3);
s32 = SecondSensor(3);
dm3 = DummyStations(3);
qu4 = Queue(4);
s41 = FirstSensor(4);
s42 = SecondSensor(4);
dm4 = DummyStations(4);
qu5 = Queue(5);
s51 = FirstSensor(5);
s52 = SecondSensor(5);
dm5 = DummyStations(5);
qu6 = Queue(6);
s61 = FirstSensor(6);
s62 = SecondSensor(6);
dm6 = DummyStations(6);

// List one or more processes to be composed into a system.
system qu1, s11, s12, dm1, qu2, s21, s22, dm2, qu3, s31, s32, dm3, qu4, s41, s42, dm4, qu5, s51, s52, dm5, qu6, s61, s62, dm6;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
